// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.Hand = (function(superClass) {
    extend(Hand, superClass);

    function Hand() {
      this.stand = bind(this.stand, this);
      return Hand.__super__.constructor.apply(this, arguments);
    }

    Hand.prototype.model = Card;

    Hand.prototype.initialize = function(array, deck, isDealer) {
      this.deck = deck;
      this.isDealer = isDealer;
      this.won = false;
      this.playerBusted = false;
      this.dealerBusted = false;
      this.dealerScore = 0;
      this.poppedCard;
      return this.on('won', (function(_this) {
        return function() {
          return _this.createAlert();
        };
      })(this));
    };

    Hand.prototype.createAlert = function() {
      if (!this.dealerBusted && !this.won) {
        this.currentScore = this.scores()[0] + this.poppedCard.get('value');
        alert('Dealer Won because player score: ' + this.currentScore);
        return this.won = true;
      } else if (!this.playerBusted && !this.won) {
        this.currentScore = this.scores()[0] + this.poppedCard.get('value');
        alert('Player Won because dealer score: ' + this.currentScore);
        return this.won = true;
      }
    };

    Hand.prototype.hit = function() {
      this.poppedCard = this.deck.pop();
      console.log(this.poppedCard.get('value'));
      if ((this.scores()[0] + this.poppedCard.get('value')) > 21) {
        return this.bust();
      } else if ((this.scores()[0] + this.poppedCard.get('value')) === 21) {
        return this.checkWinner();
      } else {
        this.add(this.poppedCard);
        return this.poppedCard;
      }
    };

    Hand.prototype.bust = function() {
      if (this.isDealer) {
        this.dealerBusted = true;
      } else if (!this.isDealer) {
        this.playerBusted = true;
      }
      return this.trigger('won');
    };

    Hand.prototype.checkWinner = function() {
      this.won = true;
      return this.trigger('won');
    };

    Hand.prototype.stand = function() {
      return this.trigger('stand');
    };

    Hand.prototype.hasAce = function() {
      return this.reduce(function(memo, card) {
        return memo || card.get('value') === 1;
      }, 0);
    };

    Hand.prototype.minScore = function() {
      return this.reduce(function(score, card) {
        return score + (card.get('revealed') ? card.get('value') : 0);
      }, 0);
    };

    Hand.prototype.scores = function() {
      return [this.minScore(), this.minScore() + 10 * this.hasAce()];
    };

    Hand.prototype.currentScore = function() {
      return this.scores()[0];
    };

    Hand.prototype.drawByDealer = function() {
      var results;
      this.playerScore = this.get('playerScore');
      if (!this.first().get('revealed')) {
        this.first().flip();
        results = [];
        while (this.scores()[0] < 17 && !this.won) {
          results.push(this.hit());
        }
        return results;
      }
    };

    return Hand;

  })(Backbone.Collection);


  /*      if(!@won)
          if @isDealer
          @dealerScore = @scores()[0]
           * else if !@isDealer
           *   playerScore = @scores()[0]
          console.log(@dealerScore, @)
          if @dealerScore - @playerScore > 0
            alert('Dealer Won -- Closest score of player: ' + @playerScore)
            @won = true
          else if @dealerScore - @playerScore < 0
            alert('Player Won -- Closest score of dealer: ' + @dealerScore)
            @won = true
   */

}).call(this);

//# sourceMappingURL=Hand.js.map
