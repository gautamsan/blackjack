// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.App = (function(superClass) {
    extend(App, superClass);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.initialize = function() {
      var deck;
      this.set('deck', deck = new Deck());
      this.set('playerHand', deck.dealPlayer());
      this.set('dealerHand', deck.dealDealer());
      this.playerHand = this.get('playerHand');
      this.dealerHand = this.get('dealerHand');
      return this.playerHand.on('stand', (function(_this) {
        return function() {
          var neverWon;
          _this.dealerHand.drawByDealer();
          console.log(_this.playerHand.won, _this.dealerHand.won);
          neverWon = !_this.playerHand.won || !_this.dealerHand.won;
          if (neverWon) {
            _this.playerScore = _this.playerHand.currentScore();
            _this.dealerScore = _this.dealerHand.currentScore();
            console.log(_this.dealerScore, _this.playerScore);
            if (_this.dealerScore - _this.playerScore > 0) {
              return alert('Dealer Won -- Closest score of player: ' + _this.playerScore);
            } else if (_this.dealerScore - _this.playerScore < 0) {
              return alert('Player Won -- Closest score of dealer: ' + _this.dealerScore);
            }
          }
        };
      })(this));
    };

    return App;

  })(Backbone.Model);

}).call(this);

//# sourceMappingURL=App.js.map
